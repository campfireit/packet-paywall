generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// MSP User model
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  businessName  String?
  purpose       String?
  password      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  clients       Client[]
  
  @@map("users")
}

// Client model for MSPs' clients
model Client {
  id          String   @id @default(cuid())
  name        String
  email       String?
  description String?
  userId      String   // Owner MSP
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  packages    Package[]
  transactions Transaction[]
  customizations Customization[]
  unifiIntegration UnifiIntegration?
  paymentSettings PaymentSettings?
  
  @@map("clients")
}

// Package model for different tiers/pricing
model Package {
  id               String   @id @default(cuid())
  name             String
  clientId         String
  type             String   // "free" or "paid"
  price            Float?   // null for free packages
  deviceLimit      Int?
  validityPeriod   Int      // in minutes
  validityUnit     String   // "minutes", "hours", "days"
  speedUpLimit     Int?     // in Kbps
  speedDownLimit   Int?     // in Kbps
  dataLimit        Int?     // in MB
  usageRestrictions String?
  upsellEmails     Boolean  @default(false)
  customColor      String?
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  client           Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  transactions     Transaction[]
  
  @@map("packages")
}

// Transaction model
model Transaction {
  id          String   @id @default(cuid())
  email       String
  packageId   String
  clientId    String
  status      String   // "pending", "completed", "failed", "cancelled"
  amount      Float?
  paymentMethod String? // "stripe", "paypal", "free"
  paymentId   String?
  comments    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  package     Package  @relation(fields: [packageId], references: [id])
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  @@map("transactions")
}

// Customization model for captive portal branding
model Customization {
  id              String   @id @default(cuid())
  clientId        String   @unique
  logoUrl         String?
  brandName       String?
  primaryColor    String?
  secondaryColor  String?
  backgroundColor String?
  fontFamily      String?
  backgroundImageUrl String?
  customCss       String?
  welcomeMessage  String?
  termsOfService  String?
  privacyPolicy   String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  client          Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  @@map("customizations")
}

// Mock Unifi Integration model
model UnifiIntegration {
  id              String   @id @default(cuid())
  clientId        String   @unique
  controllerUrl   String
  username        String
  password        String
  siteName        String
  selectedNetwork String?
  isConnected     Boolean  @default(false)
  lastSync        DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  client          Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  @@map("unifi_integrations")
}

// Payment Settings model
model PaymentSettings {
  id                String   @id @default(cuid())
  clientId          String   @unique
  stripePublishableKey String?
  stripeSecretKey   String?
  paypalClientId    String?
  paypalClientSecret String?
  isStripeActive    Boolean  @default(false)
  isPaypalActive    Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  client            Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  @@map("payment_settings")
}
